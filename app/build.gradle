/*
 * Copyright (c) 2016-2018 Projekt Substratum
 * This file is part of Substratum.
 *
 * SPDX-License-Identifier: GPL-3.0-Or-Later
 */

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

final def gitHash = { ->
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    stdout.toString().trim()
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
final def keystorePropertiesFile = rootProject.file("keystore.properties")

android {
    compileSdkVersion 28
    lintOptions {
        abortOnError false
        checkAllWarnings false
        checkReleaseBuilds false
        ignoreWarnings true
        quiet true
    }
    dataBinding.enabled true
    android.applicationVariants.all { final variant ->
        variant.outputs.all {
            outputFileName = "substratum_${variant.versionCode}_${gitHash()}.apk"
        }
    }
    defaultConfig {
        applicationId "projekt.substratum"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1010
        versionName "one thousand ten"
        buildConfigField "java.util.Date", "buildTime", "new java.util.Date(" + System.currentTimeMillis() + "L)"
        buildConfigField "String", "GIT_HASH", "\"${gitHash()}\""
        buildConfigField "boolean", "ENHANCED_LOGGING", "false"
    }

    // If the keystore file exists
    if (keystorePropertiesFile.exists()) {
        // Initialize a new Properties() object called keystoreProperties.
        final def keystoreProperties = new Properties()

        // Load your keystore.properties file into the keystoreProperties object.
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            useProguard false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (keystorePropertiesFile.exists()) signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        javaMaxHeapSize '2048m'
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/NOTICE'
    }
}

ext {
    aboutVersion = '6.0.9'
    androidXVersion = '1.0.0'
    apkSigVersion = '3.2.0'
    caocVersion = '2.2.0'
    commonsIoVersion = '2.5'
    crashlyticsVersion = '2.9.5'
    databindingVersion = '3.3.0-alpha08'
    expandableLayoutVersion = '2.9.2'
    fabSheetVersion = '1.2.1'
    firebaseVersion = '16.0.4'
    firebaseDBVersion = '16.0.3'
    floatingHeadVersion = '2.3.2'
    gestureRecyclerVersion = '1.5.0'
    glideVersion = '4.8.0'
    imageCropperVersion = '2.7.0'
    slf4jVersion = '1.7.16'
    svgViewVersion = '1.0.5'
    welcomeVersion = '1.4.1'
    ztZipVersion = '1.13'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Android Support Libraries
    implementation "androidx.databinding:databinding-runtime:$databindingVersion"
    implementation "androidx.appcompat:appcompat:$androidXVersion"
    implementation "androidx.cardview:cardview:$androidXVersion"
    implementation "androidx.recyclerview:recyclerview:$androidXVersion"
    implementation "com.google.android.material:material:$androidXVersion"
    implementation "androidx.palette:palette:$androidXVersion"

    // Firebase
    implementation "com.google.firebase:firebase-core:$firebaseVersion"
    implementation "com.google.firebase:firebase-database:$firebaseDBVersion"

    // Crashlytics
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion"

    // Image Downloading and Caching
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"

    // Commons IO
    implementation "commons-io:commons-io:$commonsIoVersion"

    // APK Signer
    implementation "com.android.tools.build:apksig:$apkSigVersion"

    // App Intro
    implementation "com.stephentuso:welcome:$welcomeVersion"

    // Floating Action Buttons
    implementation "com.gordonwong:material-sheet-fab:$fabSheetVersion"

    // About Libraries
    implementation("com.mikepenz:aboutlibraries:$aboutVersion@aar") {
        transitive = true
    }

    // Gesture RecyclerView
    implementation "com.thesurix.gesturerecycler:gesture-recycler:$gestureRecyclerVersion"

    // ZT Zip
    implementation "org.zeroturnaround:zt-zip:$ztZipVersion"

    // Image Processing
    implementation "com.theartofdev.edmodo:android-image-cropper:$imageCropperVersion"

    // Expandable Layout
    implementation "net.cachapa.expandablelayout:expandablelayout:$expandableLayoutVersion"

    // Floating App Head
    implementation "com.github.recruit-lifestyle:FloatingView:$floatingHeadVersion"

    // Crash Activity
    implementation "cat.ereza:customactivityoncrash:$caocVersion"

    // Splash screen svg animation
    implementation "com.jaredrummler:animated-svg-view:$svgViewVersion"

    // SLF4J LoggerFactory
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
}
apply plugin: 'com.google.gms.google-services'